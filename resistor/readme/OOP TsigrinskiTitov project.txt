Leonid Tšigrinski ja Alexander Titov
Resistori sisetakistuse arvutus värvi järgi.

Sissejuhatus:
Eeldame, et kasutaja teab, mis resistor üldiselt on. Igal resistoril on oma 
takistus, mis sõltub tema materjalist, pikkusest ja diametrisest. 
Selleks, et mugavaks need eristada, tootajad markerivad need värviga. 
Iga värvi riba tähendab midagi. 

On olemas neli tüüpi: 3, 4, 5 ja 6 ribane markering. 
Kui on kolm, siis esimesed kaks ribad on numbrid, kolmas on kordaja.
Kui on neli, siis esimesed kolm on sama, vaid neljas on mõttemääramatus (sõltub lihtsalt kvaliteetist)
Kui on viis, siis esimesed kolm ribad on juba numbrid, nejas on kordaja, viies mõttemääramatus (tolerantsus) 
Kuue ribase puhul, kuues on temperaturi tegur, aga sellist väga palju ei kasuta.

Rühmatöö käigus.
Kasutasime java swing ning proovisime teha kaks erinevad versioonid. Üks kompaktne versioon (Leonidi oma) 
ja teine suurem versioon (Aleksandri oma). Esimene versiion on pigem kiirarvutuse jaoks, kuid
teien õpimise jaoks. Et inimene, kes ei ole kogenud, saaks aru, mis ülde need ribad tähendavad. 
Hektkel, need verioonid on kaks erinevad programmid. Tulemus plaanis meil on need kokku panna, lisada
paar füüsikalisi kasukillu kalkulaatorid veel (nt rööbiti resistorite takistus või mingi elektriahela teoreme seotud)
et teha suur kasulik programm. Aga, hektel, isegi need kaks programmid on valmis, et aidata kõigile, kes tahab
päriselt need kasutada.


----------------------
Leonidi töö kirjeldus:

On klassid Main, Gui ja Resistor.

Resistor kalss loob Resistor objekti. Konstruktorid kirjeldavad, mis värvid 
mida tähendavad (nagu ülaspool mainitud). Selleks, et määrata arvud, kasutan HashMap, 
kus on paar (String värv , double arv). 
Konstruktor võtab vastu String argumentid, 
ja ise teisendab need numbriks. Edaspidi meil on vaja ainult üks 
meetod sellest klassis -- toSting().

Gui kasutab järgmised klassid: MyFrame, MyPanel, MyLabelImage, MyLabeltext, MyButton ja MyComboBox,
nad on kõik child klassid vastavalt oma nimele (MyFrame <= JFrame, MyButton <= JButton jne.)
Tegin nii paju muudatusi selleks et: 
1) Saaks mugavalt muuta nende stüül klassi sees
2) Saaks mugavalt muuta nende asukoht kontruktori parametrna
3) Ei oleks PeaFrame'il kirjutatud koodi unnik erinevate nuppuga ja teise elemendiga, kus on lihtsalt palju stiliseerimist
Kasutasind mõnel kalssil HashMappid, et mugavalt määrata vastav väärtus (nt MyPanelis on iga Stringi värv jaoks on vastav Color objekt)

Hektel, MyFrame'il on järgmine struktuur -
Frame peal on LayeredPane. Ja juba Pane peale panen kõik elemendid. See on selleks, et määrata elemedtide kiht.
See on oluline et meil one PNG pilt resistoritega ilma ribadeta (ribade asemel on tyhik). Sinna alla lisan 5 Panelid.
Vaikimisi, panelid on sama värviga, nagu resistori pilt (pruun) (kujutame ette, et resistor ilma ribata)
Button ja ComboBox realiseerivad ActionListener liides. 
Buttoni jaoks on oma actionPerformed meetod. Kui vajutame nuppu, kogume listi kõik ComboBoxi sõned, võtame sealt kõik "none" maha ja loome Resistori objekt, 
vahetame MyLabelText tekst (vaikimisi lihtsalt ""), kasutades Resistori toString() meetod. Samas, programm kontrollib, kas saab üldse objektri luua.
Kui vajutame ComboBoxi värv, vahetame Paneli vastavalt combobox'ile värv. Seal kasutan lambda funktsiooni (Paneli oma meetod setColor()). See on lihtsalt mugavam.
Lisaks, seal on MyLabelText, see on abiteks (iga comboboxi all).

Programm töötab korralikult arvutuses mõttes. Meeldis, et sain hästi palju uued oskused, nagu java swing, lambda funktsioonid või toppelt {{}} kastuamine.
Minusest minu poolt on see, et combobox'id on staatilised. Ehk, mis programm teeb, ta lihtsalt võtab järjest combobox'i värvid (stringid). Kui loome resistor nt kasutades 
viimased kolm komboboksid, nende valikud mõelnud mitte numbri jaoks. Ja kui paneme nt Silver Gold Silver, siis kontruktor ikka toimub. Klass loodut, aga loomisel
ta ei leia oma HashMappis silver'i ja gold'i jaoks vastav väärtus, sest meie panime värv mis mõelnud tolerantsuse määramiseks. Lahenduseks on väike abi tekst ComboBoxi all.

Sain tehtud umbes 6-10 tunniga.

-----------------------
Aleksandri töö kirjeldus:

On klassid Start ja Panel.

Klassis Start luuakse Jframe ja määratakse selle sätted, samuti käivitatakse selles klassis programm.

Kõik objektid luuakse klassis Paneel, mis seejärel paigutatakse Jframe'i.
Funktsioon paintComponent kuvab värvide nimed, kalkulaatori abil saadud tulemuse ja kuvab ka takisti värvid mis oli valitud.
Funktsioon Paneel kuvab ekraanil takisti pildi, samuti values, decimalfactor ja tolerance funktsioonide abil kuvab ekraanil kõik vajalikud nupud. Kõigi nuppude värvid on samuti määratud.
Funktsioon Appereance vastutab selle eest, et programmi esmakordsel käivitamisel valib kalkulaator ise juhuslikud väärtused ja näitab tulemust.
Check funktsioon kontrollib valitud nuppude väärtusi ja kuvab tulemuse ekraanil.
Samuti on viis ActionListeneri, mis võtavad argumendina nuppude loendi ja muudavad kuvatavat tulemust sõltuvalt vajutatud nupust.
Samuti on olemas nupp, mis lisab takisti jaoks veel ühe väärtuse veeru ja ActionListener, mis töötleb selle väärtusi ja väljunditulemust.

Gui kasutab järgmised klassid: MyFrame, MyPanel, MyLabelImage, MyLabeltext, MyButton.

Programm töötab hästi, mulle meeldib kujundus ja disain.Ьiinustest võib märkida, et kood osutus üsna tülikaks ja seda sai paremini optimeeridaю

Sain tehtud umbes 6-10 tunniga.


##################################

##################################

##################################

##################################
2. Rühmatöö. Arendamee edasi meie projekt. Lisame veel deltaY transfromation kalkulaatorja rööbiti ühenduse kalkulaator, veateade logid ja vea töötlus.

Leonidi osa:
Tegin delta-to-Y kalkulaator. Programm näitab ja kalkuleerib, kuidas kolmnurk ühendus saaks transfromerida.
Väga hästi proovisin struktureerida koodi, lisasin eraldi klassid Styler, kus saaks väga mugavat muuta kõik stüülid. 
Veidi muutusin minu java Swing klassid (Peaklassis Styler), et konstruktor oleks paindlikkum - lisasin rohkem parametid, nagu asukoht, suurus jne.

// Siit tuleb öelda, et kuna Aleksandr lahkub ülikoolist, projekt sai tehtud ainult minuga, seega ma hakkasin siit teha teine kalkulaator -- rööbiti ühenduse kalkulaator interaktiiv TextField lisamisega

Algorimt on üldiselt ühine -- kirjutame midagi TextField'ile, nuppude vajutusel võtab programm arvud vastu ja kalkuleerib kõik. Delta-To-Y ja Värvi Kalkulaatori jaoks oli mõitslik teha
kalkuleerimiseks eraldi kalss, aga rööbiti ühenduse jaoks veel mitte -- tuleb lihtsalt liita kõik TextField arvud.
Rööbiti ühendus kalkulaatoriga tegin nii, et meedotiga addTextField() ja removeTextField() lisan ja kustutan TextFieldid, aga samas lisan need kõik Listi. Siis, kui on vaja kalkuleerida numbrid,
for'iga käin läbi Listi ja võtan kõik numbrid vastu.

Sain veel põhi aken tehtud. Programm on nüüd ühine, kõik on seostatud ja ilus. Kõik aknad, tegelikult, töötavad ka, nad on peidetud. Pea menüüs, kui vajutame nuppu, 
programm näitab vajalik aken (aken.setVisible(true) meetodiga) ja peidab põhiaken. Ümberkirjutasin EXIT_ON_CLOSE meetodit nii, et kui vajutasime mingile aknale, X vajutusel liikume tagasi põhiakna. 
Ja juba põhiakna sulgemisel lõpetab programm töö.

Lisaks, kui kasutaja ise sisetab arvu, programm ikka tegeleb veateadega, väljustades kõik info ekraanile ja salvestab vea kohta info .txt failina (logError() meetodiga).
On olemas ka "?" nuppud, mis seletavad, mille jaoks konktreetne kalkulaator on.

See koord meeldis, et sain kõik teha ilusti, arusaadav ja sturktureeritav. Iga kalkulaatori jaoks on oma Logic ja Gui kalss, kood ise jagatus loogiliseks plokkideks.
Lisaks, projekt on kergesti suurendav, sest iga Gui + Logic klass on iseseisvalt töötavaid ka (tuleb kusiganes Test kalssis kutsuda Gui klass ja klass.setVisible(true) panna)
Seega soovitan vaadata üle eraldi GUI + LOGIC klassid ja siis vaadata, kuidas ma seostasin need Main Klassis (nagu eespol mainitud)

Isegi Aleksandri kood (mida ma ise ei viitsi ümberkirjutada :) ) oli ilusti lisatud projekti.
            











